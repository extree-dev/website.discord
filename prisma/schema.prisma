// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ======= MODELS =======
model User {
  id            Int           @id @default(autoincrement())
  name          String
  nickname      String        @unique
  email         String        @unique
  password      String?   
  discordId     String?       @unique
  emailVerified Boolean       @default(false)
  posts         Post[]
  sessions      Session[]
  profile       Profile?      @relation("UserProfile")
  secretCodes   SecretCode[]  // Добавлено обратное отношение
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  lastLogin     DateTime?
  loginAttempts Int           @default(0)
  lockedUntil   DateTime?
  isActive      Boolean       @default(true)
  // Новое поле для отслеживания использованного кода регистрации
  registrationCodeUsed String?

  @@map("users")
}

model Profile {
  id              Int      @id @default(autoincrement())
  userId          Int      @unique
  user            User     @relation("UserProfile", fields: [userId], references: [id], onDelete: Cascade)
  firstName       String?
  lastName        String?
  country         String?
  city            String?
  avatar          String?
  profileCompleted Boolean @default(false)
  sessionId       String?
  discordRole     String?
  // Новое поле для секретного кода при завершении профиля
  registrationCode String?

  @@map("profiles")
}

model Session {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  ipAddress String
  userAgent String
  loginMethod String @default("password")
  createdAt DateTime @default(now())
  secretCodes SecretCode[]

  @@index([userId])
  @@index([expiresAt])
  @@index([loginMethod])
  @@map("sessions")
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  published Boolean  @default(false)
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([authorId])
  @@index([published])
  @@map("posts")
}

model SecurityLog {
  id        Int      @id @default(autoincrement())
  type      String
  message   String
  metadata  Json?
  createdAt DateTime @default(now())

  @@map("security_logs")
}

model SecretCode {
  id        String   @id @default(uuid())
  code      String   @unique
  createdBy String
  createdAt DateTime @default(now())
  used      Boolean  @default(false)
  usedBy    String?
  usedAt    DateTime?
  expiresAt DateTime?
  maxUses   Int      @default(1)
  uses      Int      @default(0)
  
  // Добавляем связь с пользователем
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  // Добавляем связь с сессией
  sessionId Int?
  session   Session? @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  @@map("secret_codes")
}

model CommandUsage {
  id        Int      @id @default(autoincrement())
  guildId   String   @db.VarChar(255)
  command   String   @db.VarChar(100)
  userId    String   @db.VarChar(255)
  success   Boolean
  executionTime Int  // время выполнения в ms
  error     String?  @db.Text
  timestamp DateTime @default(now())
  channelId String?  @db.VarChar(255)

  @@index([guildId])
  @@index([command])
  @@index([timestamp])
  @@index([userId])
}