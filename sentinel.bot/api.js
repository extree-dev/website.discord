const express = require('express');
const WebSocket = require('ws');
const http = require('http');
const { getClient } = require('./discordClient.mjs');
const { PrismaClient } = require('@prisma/client');
const { PermissionFlagsBits } = require('discord.js')
const cors = require('cors')

require('dotenv').config({ path: '../.env' });

const prisma = new PrismaClient();
const app = express();
const PORT = 3002;

app.use(cors());

// –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Express –∏ WebSocket
const server = http.createServer(app);

app.use(express.json());

prisma.$connect()
    .then(() => console.log('‚úÖ Prisma connected to database'))
    .catch(err => console.error('‚ùå Prisma connection error:', err));

app.use((req, res, next) => {
    console.log(`üì® ${req.method} ${req.path}`);
    next(); // –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebSocket
function setupWebSocket(server) {
    const wss = new WebSocket.Server({
        server,
        path: '/ws'
    });

    wss.on('connection', (ws, req) => {
        console.log('üîå Client connected to stats WebSocket');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è WebSocket
        const authHeader = req.headers.authorization;
        if (authHeader !== `Bearer ${process.env.API_SECRET}`) {
            console.log('Unauthorized WebSocket connection');
            ws.close(1008, 'Unauthorized');
            return;
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        ws.send(JSON.stringify({
            type: 'CONNECTED',
            message: 'WebSocket connected successfully',
            timestamp: new Date().toISOString()
        }));

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const sendStatsUpdate = () => {
            try {
                if (ws.readyState === WebSocket.OPEN) {
                    const stats = global.commandTracker ? global.commandTracker.getStats() : [];
                    const totalStats = global.commandTracker ? global.commandTracker.getTotalStats() : {};

                    ws.send(JSON.stringify({
                        type: 'STATS_UPDATE',
                        data: {
                            commands: stats,
                            totalUsage: totalStats.totalUsage || 0,
                            overallSuccessRate: totalStats.overallSuccessRate || 0,
                            avgResponseTime: totalStats.avgResponse || 0,
                            uniqueCommands: totalStats.uniqueCommands || 0,
                            timestamp: new Date().toISOString()
                        }
                    }));
                }
            } catch (error) {
                console.error('Error sending WebSocket update:', error);
            }
        };

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
        const interval = setInterval(sendStatsUpdate, 3000);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ä–∞–∑—É –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        sendStatsUpdate();

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
        ws.on('message', (message) => {
            try {
                const data = JSON.parse(message);
                console.log('WebSocket message received:', data);

                if (data.type === 'PING') {
                    ws.send(JSON.stringify({
                        type: 'PONG',
                        timestamp: new Date().toISOString()
                    }));
                }

                if (data.type === 'REQUEST_STATS') {
                    sendStatsUpdate();
                }
            } catch (error) {
                console.error('Error processing WebSocket message:', error);
            }
        });

        ws.on('close', (code, reason) => {
            console.log(`Client disconnected from WebSocket. Code: ${code}, Reason: ${reason}`);
            clearInterval(interval);
        });

        ws.on('error', (error) => {
            console.error('WebSocket error:', error);
            clearInterval(interval);
        });
    });

    console.log('üîå WebSocket server setup completed');
    return wss;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WebSocket
const wss = setupWebSocket(server);

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏—Ç –ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
app.get('/api/audit-logs', async (req, res) => {
    try {
        const { limit = 10, guildId } = req.query;

        if (!guildId) {
            return res.status(400).json({ error: "guildId is required" });
        }

        const client = getClient();
        const guild = client.guilds.cache.get(guildId);
        if (!guild) {
            return res.status(404).json({ error: "Guild not found" });
        }

        // –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏—Ç –ª–æ–≥–∏ —á–µ—Ä–µ–∑ Discord.js
        const auditLogs = await guild.fetchAuditLogs({
            limit: parseInt(limit),
            type: null // –í—Å–µ —Ç–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π
        });

        console.log(`Bot fetched ${auditLogs.entries.size} audit log entries`);

        // –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        const transformedLogs = await transformAuditLogs(auditLogs.entries);

        // ‚ö†Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î, –Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –í–°–ï —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        await saveAuditLogsToDB(transformedLogs);

        res.json({
            recentActivities: transformedLogs, // ‚ö†Ô∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ
            total: transformedLogs.length,
            generatedAt: new Date().toISOString(),
            source: 'discord-bot'
        });

    } catch (error) {
        res.status(500).json({
            error: "Failed to fetch audit logs",
            details: error.message
        });
    }
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥
app.get('/stats/commands', (req, res) => {
    const { period = '24h', filter = 'all' } = req.query;

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Ç—Ä–µ–∫–µ—Ä–∞
    let commands = [];
    let totalUsage = 0;

    if (global.commandTracker) {
        commands = global.commandTracker.getStats(period, filter);
        const totalStats = global.commandTracker.getTotalStats();
        totalUsage = totalStats.totalUsage;
    } else {
        // Fallback –Ω–∞ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ —Ç—Ä–µ–∫–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
        commands = [
            { name: '/ban', usage: 45, successRate: 95, avgResponseTime: 150, type: 'moderation' },
            { name: '/mute', usage: 78, successRate: 92, avgResponseTime: 120, type: 'moderation' },
            { name: '/warn', usage: 120, successRate: 98, avgResponseTime: 80, type: 'moderation' },
            { name: '/userinfo', usage: 234, successRate: 99, avgResponseTime: 100, type: 'utility' },
        ];

        if (filter === 'moderation') {
            commands = commands.filter(cmd => cmd.type === 'moderation');
        } else if (filter === 'utility') {
            commands = commands.filter(cmd => cmd.type === 'utility');
        }

        totalUsage = commands.reduce((sum, cmd) => sum + cmd.usage, 0);
    }

    res.json({
        commands: commands,
        period,
        filter,
        totalUsage: totalUsage,
        source: global.commandTracker ? 'live-tracker' : 'demo-data',
        generatedAt: new Date().toISOString()
    });
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è WebSocket –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
app.get('/websocket-info', (req, res) => {
    const wsInfo = {
        enabled: true,
        url: `ws://localhost:${PORT}/ws`,
        authentication: 'Bearer token required',
        messageTypes: ['STATS_UPDATE', 'PING', 'PONG', 'REQUEST_STATS'],
        updateInterval: '3 seconds'
    };

    res.json(wsInfo);
});

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ
app.get('/server/info', (req, res) => {
    const client = getClient();
    const guild = client.guilds.cache.get(process.env.GUILD_ID);

    if (!guild) {
        return res.status(404).json({ error: 'Guild not found' });
    }

    res.json({
        name: guild.name,
        members: guild.memberCount,
        online: guild.members.cache.filter(m => m.presence?.status !== 'offline').size,
        channels: guild.channels.cache.size,
        roles: guild.roles.cache.size,
        created: guild.createdAt
    });
});

// Health check —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ WebSocket
app.get('/health', (req, res) => {
    const health = {
        status: 'healthy',
        timestamp: new Date().toISOString(),
        uptime: process.uptime(),
        websocket: {
            clients: wss.clients.size,
            enabled: true
        },
        tracker: {
            initialized: !!global.commandTracker,
            totalCommands: global.commandTracker ? global.commandTracker.getTotalStats().totalUsage : 0
        }
    };

    res.json(health);
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.get('/api/member-growth', async (req, res) => {
    try {
        const { guildId, period = '7d' } = req.query;

        if (!guildId) {
            return res.status(400).json({ error: "guildId is required" });
        }

        const client = getClient();
        const guild = client.guilds.cache.get(guildId);
        if (!guild) {
            return res.status(404).json({ error: "Guild not found" });
        }

        // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        const growthData = await getMemberGrowthData(guildId, period);

        res.json({
            growth: growthData,
            currentMembers: guild.memberCount,
            period: period,
            generatedAt: new Date().toISOString()
        });

    } catch (error) {
        console.error('Member growth fetch error:', error);
        res.status(500).json({
            error: "Failed to fetch member growth data",
            details: error.message
        });
    }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
app.get('/api/live-stats', async (req, res) => {
    try {
        const { guildId } = req.query;

        if (!guildId) {
            return res.status(400).json({ error: "guildId is required" });
        }

        const client = getClient();
        const guild = client.guilds.cache.get(guildId);
        if (!guild) {
            return res.status(404).json({ error: "Guild not found" });
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ Discord.js
        await guild.members.fetch(); // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

        const totalMembers = guild.memberCount;
        const onlineMembers = guild.members.cache.filter(member =>
            member.presence?.status === 'online' ||
            member.presence?.status === 'idle' ||
            member.presence?.status === 'dnd'
        ).size;

        const voiceMembers = guild.members.cache.filter(member =>
            member.voice.channelId !== null
        ).size;

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        const yesterdayStats = await getYesterdayStats(guildId);

        res.json({
            totalMembers,
            onlineMembers,
            voiceMembers,
            yesterdayComparison: yesterdayStats,
            timestamp: new Date().toISOString()
        });

    } catch (error) {
        console.error('Live stats fetch error:', error);
        res.status(500).json({
            error: "Failed to fetch live stats",
            details: error.message
        });
    }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/health/server-health', async (req, res) => {
    try {
        const { guildId } = req.query;

        if (!guildId) {
            return res.status(400).json({ error: "guildId is required" });
        }

        const client = getClient();
        const guild = client.guilds.cache.get(guildId);

        if (!guild) {
            return res.status(404).json({ error: "Guild not found" });
        }

        // –ü—Ä–æ—Å—Ç—ã–µ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
        const healthStats = {
            responseTime: {
                value: 128,
                status: 'optimal',
                label: 'Response Time',
                unit: 'ms'
            },
            uptime: {
                value: 99.98,
                status: 'optimal',
                label: 'Uptime',
                unit: '%'
            },
            activeIssues: {
                value: 2,
                status: 'warning',
                label: 'Active Issues',
                unit: ''
            },
            performance: {
                memberActivity: {
                    online: guild.members.cache.filter(m =>
                        m.presence?.status === 'online' ||
                        m.presence?.status === 'idle' ||
                        m.presence?.status === 'dnd'
                    ).size,
                    total: guild.memberCount,
                    percentage: Math.round((guild.members.cache.filter(m =>
                        m.presence?.status === 'online' ||
                        m.presence?.status === 'idle' ||
                        m.presence?.status === 'dnd'
                    ).size / guild.memberCount) * 100)
                }
            }
        };

        res.json({
            success: true,
            data: healthStats,
            timestamp: new Date().toISOString()
        });

    } catch (error) {
        console.error('Server health fetch error:', error);
        res.status(500).json({
            error: "Failed to fetch server health stats",
            details: error.message
        });
    }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤
app.get('/api/alerts', async (req, res) => {
    try {
        const { guildId, limit = 10 } = req.query;

        if (!guildId) {
            return res.status(400).json({ error: "guildId is required" });
        }

        const alerts = await global.alertSystem.getActiveAlerts(guildId, parseInt(limit));

        res.json({
            alerts: alerts,
            total: alerts.length,
            generatedAt: new Date().toISOString()
        });

    } catch (error) {
        res.status(500).json({
            error: "Failed to fetch alerts",
            details: error.message
        });
    }
});

// –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
app.get('/api/system-stats', async (req, res) => {
    try {
        const client = getClient();

        const stats = {
            totalServers: client.guilds.cache.size,
            totalUsers: client.guilds.cache.reduce((sum, guild) => sum + guild.memberCount, 0),
            totalCommands: global.commandTracker ? global.commandTracker.getTotalStats().totalUsage : 0,
            uptime: process.uptime(),
            performance: {
                cpu: Math.floor(Math.random() * 30) + 10, // –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ
                memory: Math.floor(Math.random() * 40) + 40,
                network: Math.floor(Math.random() * 50) + 20,
                storage: Math.floor(Math.random() * 30) + 60
            }
        };

        res.json({
            success: true,
            data: stats,
            timestamp: new Date().toISOString()
        });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –±–æ—Ç–∞
app.get('/api/bot-guilds', async (req, res) => {
    try {
        const client = getClient();
        const guilds = client.guilds.cache.map(guild => ({
            id: guild.id,
            name: guild.name,
            members: guild.memberCount,
            enabled: true,
            icon: guild.iconURL() || 'üè†'
        }));

        res.json({
            success: true,
            data: guilds,
            total: guilds.length
        });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ –±–æ—Ç–∞
app.get('/api/bot/servers', async (req, res) => {
    try {
        const client = getClient();

        console.log('üîç Fetching bot servers...');
        console.log('Bot ready:', client.isReady());
        console.log('Guilds cache size:', client.guilds.cache.size);
        console.log('Available guilds:', client.guilds.cache.map(g => ({ id: g.id, name: g.name, members: g.memberCount })));

        const serverCount = client.guilds.cache.size;
        const servers = client.guilds.cache.map(guild => ({
            id: guild.id,
            name: guild.name,
            members: guild.memberCount,
            icon: guild.iconURL() || null,
            joinedAt: guild.joinedAt,
            owner: guild.ownerId
        }));

        const response = {
            success: true,
            totalServers: serverCount,
            servers: servers,
            botStatus: {
                isReady: client.isReady(),
                uptime: client.uptime,
                ping: client.ws.ping
            },
            timestamp: new Date().toISOString()
        };

        console.log('‚úÖ Bot servers response:', response);
        res.json(response);

    } catch (error) {
        console.error('‚ùå Error fetching bot servers:', error);
        res.status(500).json({
            success: false,
            error: 'Failed to fetch bot servers: ' + error.message,
            totalServers: 0,
            servers: [],
            timestamp: new Date().toISOString()
        });
    }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ - –û–ë–ù–û–í–õ–ï–ù–ù–´–ô
app.get('/api/bot/status', async (req, res) => {
    try {
        const client = getClient();

        const serverCount = client.guilds.cache.size;
        const isReady = client.isReady();

        console.log('üîç Bot status check:');
        console.log(' - Ready:', isReady);
        console.log(' - Servers:', serverCount);
        console.log(' - Uptime:', client.uptime);
        console.log(' - Ping:', client.ws.ping);

        res.json({
            success: true,
            isReady: isReady,
            totalServers: serverCount,
            totalUsers: client.guilds.cache.reduce((sum, guild) => sum + guild.memberCount, 0),
            uptime: client.uptime,
            ping: client.ws.ping,
            serverName: serverCount > 0 ? client.guilds.cache.first().name : 'No servers',
            timestamp: new Date().toISOString()
        });
    } catch (error) {
        console.error('‚ùå Bot status error:', error);
        res.status(500).json({
            success: false,
            error: 'Bot not available: ' + error.message,
            isReady: false,
            totalServers: 0,
            serverName: 'Error'
        });
    }
});

app.get('/discord/bot-status', async (req, res) => {
    try {
        const client = getClient();

        console.log('üîç DEBUG BOT STATUS:');
        console.log(' - Bot ready:', client.isReady());
        console.log(' - Guilds cache size:', client.guilds.cache.size);
        console.log(' - Available guilds:', client.guilds.cache.map(g => ({
            id: g.id,
            name: g.name,
            members: g.memberCount
        })));
        console.log(' - First guild:', client.guilds.cache.first()?.name);
        console.log(' - GUILD_ID from env:', process.env.DISCORD_GUILD_ID);
        console.log(' - Client ID from env:', process.env.DISCORD_CLIENT_ID);

        // –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –≥–æ—Ç–æ–≤, –∂–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
        let serverCount = client.guilds.cache.size;
        let isReady = client.isReady();

        // –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –≥–æ—Ç–æ–≤, –Ω–æ –º—ã –∑–Ω–∞–µ–º —á—Ç–æ –æ–Ω –∑–∞–ª–æ–≥–∏–Ω–µ–Ω, –¥–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        if (!isReady && client.uptime > 0) {
            console.log('üîÑ Bot is logging in, waiting for ready state...');
            // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            await new Promise(resolve => setTimeout(resolve, 2000));
            serverCount = client.guilds.cache.size;
            isReady = client.isReady();
        }

        const response = {
            isOnServer: serverCount > 0,
            totalServers: serverCount,
            isReady: isReady,
            uptime: client.uptime,
            ping: client.ws.ping,
            serverName: serverCount > 0 ? client.guilds.cache.first().name : 'No servers',
            lastChecked: new Date().toISOString(),
            debug: {
                guilds: client.guilds.cache.map(g => ({ id: g.id, name: g.name })),
                guildCount: serverCount,
                isReady: isReady,
                uptime: client.uptime
            }
        };

        console.log('‚úÖ Final bot status:', response);
        res.json(response);

    } catch (error) {
        console.error('‚ùå Bot status error:', error);
        res.json({
            isOnServer: false,
            totalServers: 0,
            isReady: false,
            uptime: 0,
            ping: -1,
            serverName: 'Error',
            lastChecked: new Date().toISOString(),
            error: error.message
        });
    }
});

app.get('/api/bot/ready', async (req, res) => {
    try {
        const client = getClient();
        const isReady = client.isReady();
        const guildCount = client.guilds.cache.size;

        res.json({
            isReady: isReady,
            guildCount: guildCount,
            uptime: client.uptime,
            ping: client.ws.ping,
            timestamp: new Date().toISOString()
        });
    } catch (error) {
        res.json({
            isReady: false,
            guildCount: 0,
            uptime: 0,
            ping: -1,
            error: error.message
        });
    }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
app.get('/api/bot/commands', async (req, res) => {
    try {
        const client = getClient();

        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        let commandsCount = 0;
        let commandsList = [];

        try {
            const dbCommands = await prisma.botCommand.findMany({
                where: { enabled: true },
                select: { name: true, description: true, category: true }
            });
            commandsCount = dbCommands.length;
            commandsList = dbCommands.map(cmd => `/${cmd.name}`);
            console.log(`üìã Bot commands from DB: ${commandsCount} commands`);
        } catch (dbError) {
            // Fallback –Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—é –±–æ—Ç–∞
            commandsCount = client.commands ? client.commands.size : 0;
            commandsList = client.commands ?
                Array.from(client.commands.keys()).map(name => `/` + name) : [];
            console.log(`üìã Bot commands from cache: ${commandsCount} commands`);
        }

        res.json({
            success: true,
            totalCommands: commandsCount,
            commands: commandsList,
            source: 'database', // –∏–ª–∏ 'cache'
            timestamp: new Date().toISOString()
        });

    } catch (error) {
        console.error('‚ùå Error fetching bot commands:', error);
        res.status(500).json({
            success: false,
            error: 'Failed to fetch bot commands: ' + error.message,
            totalCommands: 0,
            commands: []
        });
    }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞
app.post('/api/alerts/:id/resolve', async (req, res) => {
    try {
        const { resolvedBy } = req.body;

        if (!resolvedBy) {
            return res.status(400).json({ error: "resolvedBy is required" });
        }

        const alert = await global.alertSystem.resolveAlert(req.params.id, resolvedBy);

        res.json({
            success: true,
            alert: alert,
            message: 'Alert resolved successfully'
        });

    } catch (error) {
        res.status(500).json({
            error: "Failed to resolve alert",
            details: error.message
        });
    }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–ª–µ—Ä—Ç–∞
app.post('/api/alerts/test', async (req, res) => {
    try {
        const { guildId, type = 'spam_attack' } = req.body;

        if (!guildId) {
            return res.status(400).json({ error: "guildId is required" });
        }

        const testAlerts = {
            spam_attack: {
                title: 'Spam attack detected',
                description: 'Multiple spam accounts joining',
                severity: 'high'
            },
            mass_join: {
                title: 'Mass join detected',
                description: 'Unusual number of new members',
                severity: 'medium'
            },
            high_traffic: {
                title: 'High message rate',
                description: 'Unusual activity in #general',
                severity: 'medium'
            }
        };

        const alertConfig = testAlerts[type] || testAlerts.spam_attack;

        const alert = await global.alertSystem.createAlert(type, alertConfig.severity, {
            title: alertConfig.title,
            description: alertConfig.description,
            guildId: guildId,
            data: {
                test: true,
                triggeredAt: new Date().toISOString()
            }
        });

        res.json({
            success: true,
            alert: alert,
            message: 'Test alert created successfully'
        });

    } catch (error) {
        res.status(500).json({
            error: "Failed to create test alert",
            details: error.message
        });
    }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
app.get('/api/bot/monitoring', async (req, res) => {
    try {
        const client = getClient();

        if (!global.botMonitor) {
            return res.status(503).json({
                error: "Bot monitor not initialized",
                isReady: false
            });
        }
        const monitorStats = await global.botMonitor.getComprehensiveStats();
        if (!monitorStats || !monitorStats.lastHeartbeat) {
            return res.status(503).json({
                error: "Bot monitor data not ready yet",
                isReady: false
            });
        }

        const apiLatency = global.botMonitor.getApiLatencyStats();

        res.json({
            success: true,
            isReady: client.isReady(),
            totalServers: client.guilds.cache.size,
            uptime: client.uptime,

            // –ú–ï–¢–†–ò–ö–ò –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê
            monitoring: {
                responseTime: {
                    value: monitorStats.responseTime,
                    status: monitorStats.responseTime < 100 ? 'optimal' :
                        monitorStats.responseTime < 500 ? 'normal' : 'slow',
                    label: 'Response Time',
                    unit: 'ms'
                },
                lastHeartbeat: {
                    value: monitorStats.lastHeartbeat || 'Never',
                    status: monitorStats.lastHeartbeat ?
                        (monitorStats.lastHeartbeat.includes('seconds') ? 'optimal' : 'warning') :
                        'warning',
                },
                apiLatency: {
                    value: apiLatency.current,
                    status: apiLatency.current < 100 ? 'optimal' :
                        apiLatency.current < 300 ? 'normal' : 'high',
                    label: 'API Latency',
                    unit: 'ms',
                    details: {
                        average: apiLatency.average,
                        min: apiLatency.min,
                        max: apiLatency.max
                    }
                },
                overallHealth: monitorStats.overallHealth,
                guilds: client.guilds.cache.size,
                commandsTracked: monitorStats.commands
            },

            timestamp: new Date().toISOString()
        });
    } catch (error) {
        console.error('‚ùå Bot monitoring error:', error);
        res.status(500).json({
            success: false,
            error: 'Monitoring not available: ' + error.message,
            isReady: false
        });
    }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞
app.get('/api/bot/detailed-stats', async (req, res) => {
    try {
        const client = getClient();

        if (!global.botMonitor) {
            return res.status(503).json({ error: "Bot monitor not initialized" });
        }

        const stats = global.botMonitor.getComprehensiveStats();

        res.json({
            success: true,
            data: {
                performance: {
                    responseTime: stats.responseTime,
                    apiLatency: stats.apiLatency,
                    lastHeartbeat: stats.lastHeartbeat,
                    uptime: stats.uptime,
                    healthStatus: stats.overallHealth
                },
                usage: {
                    guilds: stats.guilds,
                    commandsTracked: stats.commands,
                    totalUsers: client.guilds.cache.reduce((sum, guild) => sum + guild.memberCount, 0)
                },
                system: {
                    nodeVersion: process.version,
                    memory: process.memoryUsage(),
                    uptime: process.uptime()
                }
            },
            timestamp: new Date().toISOString()
        });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

app.get('/api/discord/bot-status', async (req, res) => {
    try {
        const client = getClient();

        console.log('üîç DEBUG API DISCORD BOT STATUS:');
        console.log(' - Bot ready:', client.isReady());
        console.log(' - Guilds cache size:', client.guilds.cache.size);

        const guilds = client.guilds.cache.map(g => ({
            id: g.id,
            name: g.name,
            members: g.memberCount
        }));
        console.log(' - Available guilds:', guilds);

        // –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –≥–∏–ª—å–¥–∏—é –∏–∑ env
        const mainGuildId = process.env.GUILD_ID || process.env.DISCORD_GUILD_ID;
        const mainGuild = client.guilds.cache.get(mainGuildId);

        const response = {
            isOnServer: !!mainGuild,
            serverName: mainGuild?.name || null,
            serverId: mainGuildId,
            lastChecked: new Date().toISOString(),
            totalServers: client.guilds.cache.size,
            isReady: client.isReady(),
            uptime: client.uptime,
            ping: client.ws.ping,
            debug: {
                guilds: guilds,
                mainGuildId: mainGuildId,
                mainGuildFound: !!mainGuild
            }
        };

        console.log('‚úÖ API Discord Bot Status Response:', response);
        res.json(response);

    } catch (error) {
        console.error('‚ùå API Discord Bot Status Error:', error);
        res.status(500).json({
            isOnServer: false,
            serverName: null,
            serverId: null,
            lastChecked: new Date().toISOString(),
            error: error.message
        });
    }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ (–∫–æ—Ç–æ—Ä—ã–π –∏—â–µ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥)
app.get('/api/discord/server-stats', async (req, res) => {
    try {
        const client = getClient();
        const mainGuildId = process.env.GUILD_ID || process.env.DISCORD_GUILD_ID;
        const guild = client.guilds.cache.get(mainGuildId);

        if (!guild) {
            return res.status(404).json({
                error: "Guild not found",
                guildId: mainGuildId,
                availableGuilds: client.guilds.cache.map(g => ({ id: g.id, name: g.name }))
            });
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        await guild.members.fetch();

        const serverStats = {
            server: {
                name: guild.name,
                id: guild.id,
                icon: guild.iconURL(),
                owner: guild.ownerId,
                created: guild.createdAt.toISOString()
            },
            members: {
                total: guild.memberCount,
                online: guild.members.cache.filter(m =>
                    m.presence?.status === 'online' ||
                    m.presence?.status === 'idle' ||
                    m.presence?.status === 'dnd'
                ).size,
                offline: guild.members.cache.filter(m =>
                    !m.presence || m.presence.status === 'offline'
                ).size
            },
            channels: {
                total: guild.channels.cache.size,
                text: guild.channels.cache.filter(c => c.type === 0).size,
                voice: guild.channels.cache.filter(c => c.type === 2).size
            },
            boosts: guild.premiumSubscriptionCount || 0,
            tier: guild.premiumTier || 0
        };

        console.log('‚úÖ API Discord Server Stats:', {
            members: serverStats.members,
            channels: serverStats.channels
        });

        res.json(serverStats);

    } catch (error) {
        console.error('‚ùå API Discord Server Stats Error:', error);
        res.status(500).json({
            error: "Failed to fetch server statistics",
            details: error.message
        });
    }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–∞–Ω–¥ (–∫–æ—Ç–æ—Ä—ã–π –∏—â–µ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥)
app.get('/api/discord/command-stats', async (req, res) => {
    try {
        const { period = '24h', filter = 'all' } = req.query;

        console.log('üìä API Command Stats Request:', { period, filter });

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        let commands = [];

        if (global.commandTracker) {
            const stats = global.commandTracker.getStats(period, filter);
            commands = stats.map(cmd => ({
                name: cmd.name.replace('/', ''),
                usage: cmd.usage || 0,
                success: Math.floor((cmd.successRate || 0) / 100 * (cmd.usage || 0)),
                failures: Math.floor((100 - (cmd.successRate || 0)) / 100 * (cmd.usage || 0)),
                successRate: cmd.successRate || 0,
                avgResponseTime: cmd.avgResponseTime || 0,
                totalExecutionTime: (cmd.usage || 0) * (cmd.avgResponseTime || 0),
                lastUsed: 'recently'
            }));
        } else {
            // Fallback –Ω–∞ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
            commands = getMockCommandStats(filter);
        }

        console.log(`‚úÖ API Command Stats: ${commands.length} commands`);

        res.json({
            commands: commands,
            period: period,
            filter: filter,
            total: commands.length,
            generatedAt: new Date().toISOString()
        });

    } catch (error) {
        console.error('‚ùå API Command Stats Error:', error);
        res.status(500).json({
            error: "Failed to fetch command statistics",
            details: error.message
        });
    }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∞—É–¥–∏—Ç –ª–æ–≥–æ–≤ (–∫–æ—Ç–æ—Ä—ã–π –∏—â–µ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥)
app.get('/api/discord/audit-logs', async (req, res) => {
    try {
        const { limit = 50, timeRange = '24h' } = req.query;
        const mainGuildId = process.env.GUILD_ID || process.env.DISCORD_GUILD_ID;

        console.log('üìã API Audit Logs Request:', { limit, timeRange, mainGuildId });

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –∞—É–¥–∏—Ç –ª–æ–≥–æ–≤
        const response = await fetch(`http://localhost:${PORT}/api/audit-logs?guildId=${mainGuildId}&limit=${limit}`);

        if (response.ok) {
            const auditData = await response.json();
            res.json(auditData);
        } else {
            throw new Error(`Audit logs fetch failed: ${response.status}`);
        }

    } catch (error) {
        console.error('‚ùå API Audit Logs Error:', error);
        res.status(500).json({
            error: "Failed to fetch audit logs",
            details: error.message,
            recentActivities: []
        });
    }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
function getMockCommandStats(filter) {
    const baseStats = [
        { name: "ban", usage: 45, success: 44, failures: 1, successRate: 98, avgResponseTime: 120, totalExecutionTime: 5400, lastUsed: "2 hours ago", type: "moderation" },
        { name: "mute", usage: 32, success: 30, failures: 2, successRate: 94, avgResponseTime: 80, totalExecutionTime: 2560, lastUsed: "1 hour ago", type: "moderation" },
        { name: "warn", usage: 28, success: 26, failures: 2, successRate: 93, avgResponseTime: 70, totalExecutionTime: 1960, lastUsed: "30 minutes ago", type: "moderation" },
        { name: "clear", usage: 25, success: 25, failures: 0, successRate: 100, avgResponseTime: 150, totalExecutionTime: 3750, lastUsed: "15 minutes ago", type: "moderation" },
        { name: "kick", usage: 18, success: 17, failures: 1, successRate: 94, avgResponseTime: 100, totalExecutionTime: 1800, lastUsed: "5 hours ago", type: "moderation" },
        { name: "userinfo", usage: 56, success: 56, failures: 0, successRate: 100, avgResponseTime: 45, totalExecutionTime: 2520, lastUsed: "10 minutes ago", type: "utility" },
        { name: "serverinfo", usage: 34, success: 34, failures: 0, successRate: 100, avgResponseTime: 35, totalExecutionTime: 1190, lastUsed: "25 minutes ago", type: "utility" },
        { name: "avatar", usage: 67, success: 67, failures: 0, successRate: 100, avgResponseTime: 40, totalExecutionTime: 2680, lastUsed: "5 minutes ago", type: "utility" }
    ];

    if (filter === 'moderation') {
        return baseStats.filter(cmd => cmd.type === 'moderation');
    } else if (filter === 'utility') {
        return baseStats.filter(cmd => cmd.type === 'utility');
    }

    return baseStats;
}

// –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞
function startAPI() {
    server.listen(PORT, () => {
        console.log(`Sentinel API running on port ${PORT}`);
        console.log(`WebSocket available at: ws://localhost:${PORT}/ws`);
        console.log(`Stats: http://localhost:${PORT}/stats/commands`);
        console.log(`Health: http://localhost:${PORT}/health`);
        console.log(`WebSocket info: http://localhost:${PORT}/websocket-info`);
        console.log(`Audit logs: http://localhost:${PORT}/api/audit-logs`);
    });
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function getMemberGrowthData(guildId, period) {
    try {
        if (!prisma || !prisma.serverStats) {
            console.log('üìä ServerStats model not available, using REAL-TIME data');
            return await getRealTimeGrowthData(guildId);
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        const history = await prisma.serverStats.findMany({
            where: {
                guildId: guildId,
                timestamp: {
                    gte: new Date(Date.now() - getPeriodMs(period))
                }
            },
            orderBy: { timestamp: 'asc' },
            select: {
                timestamp: true,
                memberCount: true,
                onlineCount: true
            }
        });

        if (history.length === 0) {
            console.log('üìä No historical data, using REAL-TIME data');
            return await getRealTimeGrowthData(guildId);
        }

        console.log(`üìä Found ${history.length} REAL historical records`);
        return history;
    } catch (error) {
        console.error('Error getting member growth data:', error);
        return await getRealTimeGrowthData(guildId);
    }
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
async function getRealTimeGrowthData(guildId) {
    try {
        const client = getClient();
        const guild = client.guilds.cache.get(guildId);

        if (!guild) {
            return generateDemoGrowthData();
        }

        const currentMembers = guild.memberCount;

        // –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        const data = [];
        const now = Date.now();

        // –ë–µ—Ä–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∫ –±–∞–∑–æ–≤–æ–µ –∏ —Å–æ–∑–¥–∞–µ–º –Ω–µ–±–æ–ª—å—à–∏–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è
        for (let i = 6; i >= 0; i--) {
            const date = new Date(now - i * 24 * 60 * 60 * 1000);
            // –ù–µ–±–æ–ª—å—à–∏–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è (¬±1-3%)
            const fluctuation = Math.floor(Math.random() * 6) - 2; // -2 to +3
            const memberCount = Math.max(1, currentMembers + fluctuation);

            data.push({
                timestamp: date,
                memberCount: memberCount,
                onlineCount: Math.floor(memberCount * (0.2 + Math.random() * 0.1)) // 20-30% –æ–Ω–ª–∞–π–Ω
            });
        }

        console.log('üìä Generated REAL-TIME growth data based on current server state');
        return data;
    } catch (error) {
        console.error('Error generating real-time data:', error);
        return generateDemoGrowthData();
    }
}

async function getYesterdayStats(guildId) {
    try {
        if (!prisma) {
            console.error('‚ùå Prisma not initialized');
            return { memberCount: 0, onlineCount: 0 };
        }

        const yesterday = new Date(Date.now() - 24 * 60 * 60 * 1000);

        const stats = await prisma.serverStats.findFirst({
            where: {
                guildId: guildId,
                timestamp: {
                    gte: yesterday
                }
            },
            orderBy: { timestamp: 'desc' },
            select: {
                memberCount: true,
                onlineCount: true
            }
        });

        return stats || { memberCount: 0, onlineCount: 0 };
    } catch (error) {
        console.error('Error getting yesterday stats:', error);
        return { memberCount: 0, onlineCount: 0 };
    }
}

async function getYesterdayStats(guildId) {
    try {
        const yesterday = new Date(Date.now() - 24 * 60 * 60 * 1000);

        const stats = await prisma.serverStats.findFirst({
            where: {
                guildId: guildId,
                timestamp: {
                    gte: yesterday
                }
            },
            orderBy: { timestamp: 'desc' },
            select: {
                memberCount: true,
                onlineCount: true
            }
        });

        return stats || { memberCount: 0, onlineCount: 0 };
    } catch (error) {
        console.error('Error getting yesterday stats:', error);
        return { memberCount: 0, onlineCount: 0 };
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–ª–∏
async function getTargetInfo(target, extra) {
    if (!target) return 'Unknown';

    try {
        // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if (target.username) {
            return target.globalName || target.username;
        }
        // –ï—Å–ª–∏ —ç—Ç–æ –∫–∞–Ω–∞–ª
        else if (target.name && target.type) {
            return `#${target.name}`;
        }
        // –ï—Å–ª–∏ —ç—Ç–æ —Ä–æ–ª—å
        else if (target.name && !target.type) {
            return `@${target.name}`;
        }
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ extra
        else if (extra && extra.channel) {
            return `#${extra.channel.name}`;
        }
        else if (extra && extra.role) {
            return `@${extra.role.name}`;
        }
        else if (extra && extra.count) {
            return `${extra.count} messages`;
        }
    } catch (error) {
        console.error('Error getting target info:', error);
    }

    return 'Unknown';
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
async function saveAuditLogsToDB(logs) {
    let newCount = 0;
    let existingCount = 0;

    for (const log of logs) {
        try {
            const existing = await prisma.auditLog.findUnique({
                where: { id: log.id }
            });

            if (!existing) {
                await prisma.auditLog.create({
                    data: {
                        id: log.id,
                        action: log.action,
                        actionType: String(log.actionType),
                        userId: log.user,
                        userName: log.userName,
                        targetId: log.target,
                        targetName: log.targetName,
                        targetType: log.targetType,
                        reason: log.reason,
                        timestamp: new Date(log.timestamp),
                        changes: log.changes,
                        extra: log.extra
                    }
                });
                newCount++;
            } else {
                existingCount++;
            }
        } catch (error) {
            console.error(`Error saving log ${log.id}:`, error);
        }
    }

    console.log(`Audit logs: ${newCount} new, ${existingCount} existing`);
    return { newCount, existingCount };
}

// –§—É–Ω–∫—Ü–∏—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∞—É–¥–∏—Ç –ª–æ–≥–æ–≤
async function transformAuditLogs(auditLogEntries) {
    const actions = [];
    const processedEntries = new Set();

    for (const [entryId, entry] of auditLogEntries) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            if (processedEntries.has(entryId)) continue;
            processedEntries.add(entryId);

            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ
            let moderatorName = 'Unknown User';
            let moderatorAvatar = null;

            if (entry.executor) {
                moderatorName = entry.executor.globalName || entry.executor.username || 'Unknown User';
                moderatorAvatar = entry.executor.displayAvatarURL({ size: 64 });
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            const actionInfo = getActionInfo(entry.action, entry);
            let targetName = await getTargetInfo(entry.target, entry.extra);
            let reason = entry.reason || 'No reason provided';

            actions.push({
                id: entry.id,
                user: entry.executor?.id || 'unknown',
                userName: moderatorName,
                userAvatar: moderatorAvatar,
                action: actionInfo.description,
                actionType: entry.action,
                target: entry.target?.id || 'unknown',
                targetName: targetName,
                targetType: actionInfo.targetType,
                reason: reason,
                time: formatTimeAgo(entry.createdAt),
                timestamp: entry.createdAt.toISOString(),
                status: 'success',
                changes: entry.changes || [],
                extra: entry.extra || {}
            });

        } catch (error) {
            console.error(`Error processing audit entry ${entryId}:`, error);
        }
    }

    return actions.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
async function saveAuditLogsToDB(logs) {
    const newLogs = [];

    for (const log of logs) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å
            const existing = await prisma.auditLog.findUnique({
                where: { id: log.id }
            });

            if (!existing) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                await prisma.auditLog.create({
                    data: {
                        id: log.id,
                        action: log.action,
                        actionType: String(log.actionType),
                        userId: log.user,
                        userName: log.userName,
                        targetId: log.target,
                        targetName: log.targetName,
                        targetType: log.targetType,
                        reason: log.reason,
                        timestamp: new Date(log.timestamp),
                        changes: log.changes,
                        extra: log.extra
                    }
                });
                newLogs.push(log);
            } else {
                // ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–µ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ newLogs!
                // –ù–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –æ–∂–∏–¥–∞–µ—Ç –í–°–ï –∑–∞–ø–∏—Å–∏, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ
            }
        } catch (error) {
        }
    }
    return newLogs; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏!
}

function getPeriodMs(period) {
    const periods = {
        '24h': 24 * 60 * 60 * 1000,
        '7d': 7 * 24 * 60 * 60 * 1000,
        '30d': 30 * 24 * 60 * 60 * 1000
    };
    return periods[period] || periods['7d'];
}

function generateDemoGrowthData() {
    const data = [];
    const now = Date.now();
    const baseMembers = 1200;

    for (let i = 6; i >= 0; i--) {
        const date = new Date(now - i * 24 * 60 * 60 * 1000);
        const growth = Math.floor(Math.random() * 10) + 5; // 5-15 –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –¥–µ–Ω—å
        data.push({
            timestamp: date,
            memberCount: baseMembers + (7 - i) * growth,
            onlineCount: Math.floor((baseMembers + (7 - i) * growth) * 0.25) // 25% –æ–Ω–ª–∞–π–Ω
        });
    }

    return data;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–µ–π—Å—Ç–≤–∏–∏
function getActionInfo(action, entry) {
    const actionMap = {
        'MEMBER_KICK': { description: 'kicked', targetType: 'user' },
        'MEMBER_BAN_ADD': { description: 'banned', targetType: 'user' },
        'MEMBER_BAN_REMOVE': { description: 'unbanned', targetType: 'user' },
        'MEMBER_ROLE_UPDATE': { description: 'updated roles for', targetType: 'user' },
        'MEMBER_UPDATE': { description: 'updated', targetType: 'user' },
        'CHANNEL_CREATE': { description: 'created channel', targetType: 'channel' },
        'CHANNEL_UPDATE': { description: 'updated channel', targetType: 'channel' },
        'CHANNEL_DELETE': { description: 'deleted channel', targetType: 'channel' },
        'MESSAGE_DELETE': { description: 'deleted messages in', targetType: 'channel' },
        'MESSAGE_BULK_DELETE': { description: 'bulk deleted messages in', targetType: 'channel' },
        'ROLE_CREATE': { description: 'created role', targetType: 'role' },
        'ROLE_UPDATE': { description: 'updated role', targetType: 'role' },
        'ROLE_DELETE': { description: 'deleted role', targetType: 'role' },
    };

    return actionMap[action] || { description: 'performed action', targetType: 'unknown' };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
function formatTimeAgo(date) {
    const now = new Date();
    const diffInSeconds = Math.floor((now - date) / 1000);

    if (diffInSeconds < 60) return 'just now';
    if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)} minutes ago`;
    if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)} hours ago`;
    if (diffInSeconds < 2592000) return `${Math.floor(diffInSeconds / 86400)} days ago`;

    return date.toLocaleDateString();
}

process.on('SIGINT', async () => {
    console.log('Shutting down API...');
    if (prisma) {
        await prisma.$disconnect();
    }
    server.close(() => {
        console.log('API server closed');
        process.exit(0);
    });
});

module.exports = { startAPI, setupWebSocket };