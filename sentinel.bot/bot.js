require('dotenv').config({ path: '../.env' });
const { PrismaClient } = require('@prisma/client');
const { Client, GatewayIntentBits, Collection, REST, Routes } = require('discord.js');
const { initializeClient, getClient } = require('./discordClient.mjs');
const express = require('express');
const fs = require('fs');
const path = require('path');

console.log('Starting Sentinel bot...');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
console.log('Environment check:');
console.log('DISCORD_BOT_TOKEN exists:', !!process.env.DISCORD_BOT_TOKEN);
console.log('DISCORD_BOT_TOKEN length:', process.env.DISCORD_BOT_TOKEN?.length);
console.log('DISCORD_BOT_TOKEN starts with:', process.env.DISCORD_BOT_TOKEN?.substring(0, 10));
console.log('GUILD_ID:', process.env.DISCORD_GUILD_ID);
console.log('CLIENT_ID:', process.env.DISCORD_CLIENT_ID);

if (!process.env.DISCORD_BOT_TOKEN) {
    console.error(' DISCORD_BOT_TOKEN not found in .env file');
    process.exit(1);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç —á–µ—Ä–µ–∑ –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é
const client = initializeClient();

// –ö–õ–ê–°–° –î–õ–Ø –¢–†–ï–ö–ò–ù–ì–ê –ö–û–ú–ê–ù–î
class CommandTracker {
    constructor() {
        this.commandStats = new Map();
        this.startTime = Date.now();
        this.prisma = new PrismaClient();
    }

    async recordCommand(commandName, success, responseTime, guildId, userId, error = null) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if (!guildId || !userId) {
            console.log('Missing guildId or userId for command tracking');
            return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        if (!this.commandStats.has(commandName)) {
            this.commandStats.set(commandName, {
                usage: 0,
                success: 0,
                totalResponseTime: 0,
                lastUsed: Date.now(),
                type: this.getCommandType(commandName)
            });
        }

        const stats = this.commandStats.get(commandName);
        stats.usage++;
        stats.totalResponseTime += responseTime;
        if (success) stats.success++;
        stats.lastUsed = Date.now();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É —á–µ—Ä–µ–∑ Prisma
        try {
            await this.prisma.commandStats.create({
                data: {
                    command: commandName,
                    guildId: guildId,        // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
                    userId: userId,          // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
                    success: success,
                    executionTime: responseTime,
                    error: error,
                    timestamp: new Date()
                }
            });
            console.log(`Saved to DB: ${commandName}, guild: ${guildId}, user: ${userId}`);
        } catch (dbError) {
            console.error(' Error saving command stats to DB:', dbError.message);
        }

        console.log(`Command tracked: ${commandName}, success: ${success}, time: ${responseTime}ms`);
    }

    getCommandType(commandName) {
        const moderationCommands = ['ban', 'mute', 'warn', 'kick', 'timeout', 'lock', 'unlock', 'clear', 'slowmode'];
        const utilityCommands = ['userinfo', 'serverinfo', 'avatar', 'help', 'ping', 'stats', 'banner'];

        if (moderationCommands.some(cmd => commandName.includes(cmd))) return 'moderation';
        if (utilityCommands.some(cmd => commandName.includes(cmd))) return 'utility';
        return 'other';
    }

    getStats(period = '24h', filter = 'all') {
        const stats = [];
        const now = Date.now();

        const periodMs = {
            '24h': 24 * 60 * 60 * 1000,
            '7d': 7 * 24 * 60 * 60 * 1000,
            '30d': 30 * 24 * 60 * 60 * 1000
        }[period] || 24 * 60 * 60 * 1000;

        for (const [commandName, data] of this.commandStats) {
            if (data.lastUsed < now - periodMs) continue;
            if (filter !== 'all' && data.type !== filter) continue;

            const successRate = data.usage > 0 ? Math.round((data.success / data.usage) * 100) : 0;
            const avgResponseTime = data.usage > 0 ? Math.round(data.totalResponseTime / data.usage) : 0;

            stats.push({
                name: commandName,
                usage: data.usage,
                success: data.success,
                successRate: successRate,
                avgResponseTime: avgResponseTime,
                type: data.type,
                lastUsed: this.formatTimeAgo(data.lastUsed)
            });
        }

        stats.sort((a, b) => b.usage - a.usage);
        return stats;
    }

    formatTimeAgo(timestamp) {
        const diff = Date.now() - timestamp;
        const minutes = Math.floor(diff / 60000);
        const hours = Math.floor(diff / 3600000);
        const days = Math.floor(diff / 86400000);

        if (days > 0) return `${days} day${days > 1 ? 's' : ''} ago`;
        if (hours > 0) return `${hours} hour${hours > 1 ? 's' : ''} ago`;
        if (minutes > 0) return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;
        return 'just now';
    }

    getTotalStats() {
        let totalUsage = 0;
        let totalSuccess = 0;
        let totalResponseTime = 0;

        for (const [_, data] of this.commandStats) {
            totalUsage += data.usage;
            totalSuccess += data.success;
            totalResponseTime += data.totalResponseTime;
        }

        const overallSuccessRate = totalUsage > 0 ? Math.round((totalSuccess / totalUsage) * 100) : 0;
        const avgResponse = totalUsage > 0 ? Math.round(totalResponseTime / totalUsage) : 0;

        return {
            totalUsage,
            overallSuccessRate,
            avgResponse,
            uniqueCommands: this.commandStats.size
        };
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º –≤ bot.js –∫–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
class StatsCollector {
    constructor() {
        this.memberHistory = new Map();
        this.startTime = Date.now();
        this.prisma = new PrismaClient();
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    async saveServerStats(guild) {
        try {
            const totalMembers = guild.memberCount;

            // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await guild.members.fetch();
            const onlineMembers = guild.members.cache.filter(member =>
                member.presence?.status === 'online' ||
                member.presence?.status === 'idle' ||
                member.presence?.status === 'dnd'
            ).size;

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            await this.prisma.serverStats.create({
                data: {
                    guildId: guild.id,
                    memberCount: totalMembers,
                    onlineCount: onlineMembers,
                    timestamp: new Date()
                }
            });

            console.log(`REAL STATS: ${totalMembers} members, ${onlineMembers} online`);

        } catch (error) {
            console.error('Error saving server stats:', error);
        }
    }

    // –†–∞—Å—á–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞
    calculateRealGrowth(currentStats, previousStats) {
        if (!previousStats || previousStats.memberCount === 0) {
            return { change: 0, isPositive: true, period: 'new' };
        }

        const change = ((currentStats.memberCount - previousStats.memberCount) / previousStats.memberCount) * 100;
        const isPositive = change >= 0;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–Ω–∏—Ü—ã –≤–æ –≤—Ä–µ–º–µ–Ω–∏
        const timeDiff = currentStats.timestamp - previousStats.timestamp;
        const hoursDiff = timeDiff / (1000 * 60 * 60);

        let period = 'recently';
        if (hoursDiff >= 24) period = 'yesterday';
        if (hoursDiff >= 168) period = 'last week';

        return {
            change: Math.round(change * 10) / 10,
            isPositive,
            period,
            actualChange: currentStats.memberCount - previousStats.memberCount
        };
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    async getLatestStats(guildId) {
        try {
            const stats = await this.prisma.serverStats.findMany({
                where: { guildId },
                orderBy: { timestamp: 'desc' },
                take: 10
            });

            return stats.length > 0 ? stats : null;
        } catch (error) {
            console.error('Error getting latest stats:', error);
            return null;
        }
    }
}

class AlertSystem {
    constructor() {
        this.prisma = new PrismaClient();
        this.messageCache = new Map();
        this.joinCache = new Map();
        this.verificationCache = new Map();
        this.suspiciousCache = new Map();
    }

    // üîí –û–ë–ù–ê–†–£–ñ–ï–ù–ò–ï –†–ï–ô–î-–ê–¢–ê–ö–ò (–º–∞—Å—Å–æ–≤—ã–π –≤—Ö–æ–¥)
    async detectRaidProtection(guild, newMember) {
        const guildId = guild.id;
        const now = Date.now();

        if (!this.joinCache.has(guildId)) {
            this.joinCache.set(guildId, []);
        }

        const recentJoins = this.joinCache.get(guildId);
        recentJoins.push({
            userId: newMember.id,
            username: newMember.user.tag,
            timestamp: now
        });

        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç)
        const filteredJoins = recentJoins.filter(join => now - join.timestamp < 600000);
        this.joinCache.set(guildId, filteredJoins);

        // –ö—Ä–∏—Ç–µ—Ä–∏–∏ —Ä–µ–π–¥-–∑–∞—â–∏—Ç—ã Discord
        if (filteredJoins.length >= 8) { // 8+ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ 10 –º–∏–Ω—É—Ç
            await this.createAlert('raid_protection', 'critical', {
                title: 'üõ°Ô∏è –°–†–ê–ë–û–¢–ê–õ–ê –ó–ê–©–ò–¢–ê –û–¢ –†–ï–ô–î–û–í',
                description: `–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${filteredJoins.length} –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞ 10 –º–∏–Ω—É—Ç`,
                guildId: guildId,
                data: {
                    trigger: 'mass_join_protection',
                    newMembers: filteredJoins.length,
                    timeFrame: '10 minutes',
                    securityLevel: 'high',
                    recentJoins: filteredJoins.slice(-5),
                    autoActions: ['verification_required', 'slow_mode_enabled'],
                    recommendation: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –±–æ—Ç–æ–≤',
                    detectedAt: new Date().toISOString()
                }
            });
            return true;
        }

        return false;
    }

    // ü§ñ –û–ë–ù–ê–†–£–ñ–ï–ù–ò–ï –°–†–ê–ë–ê–¢–´–í–ê–ù–ò–Ø –ê–í–¢–û–ú–û–î–ê
    async detectAutoModAction(message) {
        // –ö—Ä–∏—Ç–µ—Ä–∏–∏ –∞–≤—Ç–æ–º–æ–¥–∞ Discord
        const automodTriggers = [
            // –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
            /\b(—Å–ø–∞–º|—Ä–µ–∫–ª–∞–º–∞|–∫—É–ø–∏—Ç—å|–ø—Ä–æ–¥–∞—Ç—å|discord\.gg\/)\b/i,
            // –°—Å—ã–ª–∫–∏
            /https?:\/\/[^\s]+/,
            // –ú–∞—Å—Å–æ–≤—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
            /(@everyone|@here).{0,10}(@everyone|@here)/,
            // –ö–∞–ø—Å
            /[A-Z–ê-–Ø]{10,}/
        ];

        let triggeredRule = null;

        for (const pattern of automodTriggers) {
            if (pattern.test(message.content)) {
                if (pattern.toString().includes('—Å–ø–∞–º')) triggeredRule = 'banned_words';
                else if (pattern.toString().includes('http')) triggeredRule = 'links';
                else if (pattern.toString().includes('@everyone')) triggeredRule = 'mass_mentions';
                else if (pattern.toString().includes('[A-Z]')) triggeredRule = 'caps_lock';
                break;
            }
        }

        if (triggeredRule) {
            await this.createAlert('automod_triggered', 'medium', {
                title: 'ü§ñ –ê–í–¢–û–ú–û–î –°–†–ê–ë–û–¢–ê–õ',
                description: `–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞—Ä—É—à–∞—é—â–µ–µ –ø—Ä–∞–≤–∏–ª–∞`,
                guildId: message.guild.id,
                data: {
                    action: 'content_flagged',
                    rule: triggeredRule,
                    channel: message.channel.name,
                    channelId: message.channel.id,
                    user: message.author.tag,
                    userId: message.author.id,
                    content: message.content.substring(0, 200),
                    messageUrl: `https://discord.com/channels/${message.guild.id}/${message.channel.id}/${message.id}`,
                    severity: 'auto',
                    timestamp: new Date().toISOString()
                }
            });
            return true;
        }

        return false;
    }

    // üïµÔ∏è –û–ë–ù–ê–†–£–ñ–ï–ù–ò–ï –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–• –ê–ö–ö–ê–£–ù–¢–û–í
    async detectSuspiciousAccount(member) {
        const flags = [];
        const user = member.user;
        const accountAge = Date.now() - user.createdTimestamp;

        // –ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–∫–∞–∫ –≤ Discord)
        if (accountAge < 24 * 60 * 60 * 1000) { // < 1 –¥–Ω—è
            flags.push('new_account');
        }
        if (!user.avatar) {
            flags.push('no_avatar');
        }
        if (this.hasSuspiciousUsername(user.username)) {
            flags.push('suspicious_username');
        }
        if (this.hasSuspiciousBehavior(member)) {
            flags.push('suspicious_behavior');
        }

        // –ï—Å–ª–∏ –µ—Å—Ç—å 2+ —Ñ–ª–∞–≥–∞ - —Å–æ–∑–¥–∞–µ–º –∞–ª–µ—Ä—Ç
        if (flags.length >= 2) {
            await this.createAlert('suspicious_account', 'high', {
                title: 'üïµÔ∏è –û–ë–ù–ê–†–£–ñ–ï–ù –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ô –ê–ö–ö–ê–£–ù–¢',
                description: `–ê–∫–∫–∞—É–Ω—Ç ${user.tag} –∏–º–µ–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏`,
                guildId: member.guild.id,
                data: {
                    userId: user.id,
                    username: user.tag,
                    flags: flags,
                    accountAge: `${Math.floor(accountAge / (1000 * 60 * 60))} —á–∞—Å–æ–≤`,
                    created: user.createdAt.toISOString(),
                    recommendation: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä—É—á–Ω—É—é',
                    riskLevel: flags.length >= 3 ? 'high' : 'medium',
                    detectedAt: new Date().toISOString()
                }
            });
            return true;
        }

        return false;
    }

    // üîê –û–ë–ù–ê–†–£–ñ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú –° –í–ï–†–ò–§–ò–ö–ê–¶–ò–ï–ô
    async detectVerificationIssues(guild) {
        const guildId = guild.id;
        const now = Date.now();

        if (!this.verificationCache.has(guildId)) {
            this.verificationCache.set(guildId, {
                pending: 0,
                failures: 0,
                lastCheck: now
            });
        }

        const cache = this.verificationCache.get(guildId);

        // –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–±–ª–µ–º —Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∏–∑ Discord API)
        const hasVerificationIssues = Math.random() > 0.7; // 30% chance

        if (hasVerificationIssues) {
            await this.createAlert('verification_issues', 'medium', {
                title: 'üîí –ü–†–û–ë–õ–ï–ú–´ –° –í–ï–†–ò–§–ò–ö–ê–¶–ò–ï–ô',
                description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏—Å–ø—ã—Ç—ã–≤–∞—é—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏',
                guildId: guildId,
                data: {
                    pendingVerifications: Math.floor(Math.random() * 10) + 5,
                    failedAttempts: Math.floor(Math.random() * 20) + 10,
                    timeFrame: '–ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å',
                    issue: 'captcha_failures',
                    recommendation: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ —É—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
                    serverSecurity: guild.verified ? 'high' : 'medium',
                    detectedAt: new Date().toISOString()
                }
            });
            return true;
        }

        return false;
    }

    // ‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–ò–ï –ù–ê–†–£–®–ï–ù–ò–ô –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
    async detectSecurityViolations(guild) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
        const securityIssues = [];

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if (guild.verificationLevel === 'NONE') {
            securityIssues.push('no_verification');
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ 2FA –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
        const modsWithout2FA = await this.checkMods2FA(guild);
        if (modsWithout2FA.length > 0) {
            securityIssues.push('mods_without_2fa');
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–∫—Å–ø–∏—Ä–µ–¥-–∏–Ω–≤–∞–π—Ç–æ–≤
        const hasExpiredInvites = await this.checkExpiredInvites(guild);
        if (hasExpiredInvites) {
            securityIssues.push('expired_invites');
        }

        if (securityIssues.length > 0) {
            await this.createAlert('security_violations', 'high', {
                title: '‚ö†Ô∏è –ù–ê–†–£–®–ï–ù–ò–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò',
                description: '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞',
                guildId: guild.id,
                data: {
                    issues: securityIssues,
                    verificationLevel: guild.verificationLevel,
                    modsWithout2FA: modsWithout2FA.length,
                    recommendation: '–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞',
                    urgency: securityIssues.includes('no_verification') ? 'high' : 'medium',
                    detectedAt: new Date().toISOString()
                }
            });
            return true;
        }

        return false;
    }

    // üìà –û–ë–ù–ê–†–£–ñ–ï–ù–ò–ï –ê–ù–û–ú–ê–õ–¨–ù–û–ô –ê–ö–¢–ò–í–ù–û–°–¢–ò
    async detectAnomalousActivity(guild) {
        const guildId = guild.id;
        const now = Date.now();

        if (!this.messageCache.has(guildId)) {
            this.messageCache.set(guildId, []);
        }

        const messageHistory = this.messageCache.get(guildId);

        // –°–∏–º—É–ª—è—Ü–∏—è –∞–Ω–æ–º–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        const recentMessages = messageHistory.filter(msg => now - msg.timestamp < 300000); // 5 –º–∏–Ω—É—Ç
        const messageRate = recentMessages.length / 5; // —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É

        // –ö—Ä–∏—Ç–µ—Ä–∏–∏ –∞–Ω–æ–º–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if (messageRate > 50) { // –ë–æ–ª–µ–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É
            await this.createAlert('anomalous_activity', 'medium', {
                title: 'üìà –ê–ù–û–ú–ê–õ–¨–ù–ê–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨',
                description: '–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–µ–æ–±—ã—á–Ω–æ –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ',
                guildId: guildId,
                data: {
                    messageRate: `${Math.round(messageRate)}/–º–∏–Ω`,
                    activeChannels: guild.channels.cache.filter(ch => ch.type === 0).size,
                    peakUsers: guild.members.cache.filter(m =>
                        m.presence?.status === 'online' ||
                        m.presence?.status === 'idle' ||
                        m.presence?.status === 'dnd'
                    ).size,
                    recommendation: '–í–∫–ª—é—á–∏—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö',
                    severity: messageRate > 100 ? 'high' : 'medium',
                    detectedAt: new Date().toISOString()
                }
            });
            return true;
        }

        return false;
    }

    // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    hasSuspiciousUsername(username) {
        const suspiciousPatterns = [
            /discord\.gg\/\w+/i,
            /http(s)?:\/\//i,
            /[0-9]{8,}/,
            /(admin|moderator|staff|official)/i,
            /[\u2500-\u27BF\uE000-\uF8FF]/
        ];
        return suspiciousPatterns.some(pattern => pattern.test(username));
    }

    hasSuspiciousBehavior(member) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        const joinTime = Date.now() - member.joinedTimestamp;
        return joinTime < 60000; // –£—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ —Å–æ–±—ã—Ç–∏—è—Ö –º–µ–Ω–µ–µ —á–µ–º —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É –ø–æ—Å–ª–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è
    }

    async checkMods2FA(guild) {
        // –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —á–µ—Ä–µ–∑ Discord API
        return [];
    }

    async checkExpiredInvites(guild) {
        // –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∏–Ω–≤–∞–π—Ç—ã
        return Math.random() > 0.5;
    }

    // üìù –°–û–ó–î–ê–ù–ò–ï –ê–õ–ï–†–¢–ê (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π)
    async createAlert(type, severity, alertData) {
        try {
            const alert = await this.prisma.alert.create({
                data: {
                    type: type,
                    severity: severity,
                    title: alertData.title,
                    description: alertData.description,
                    guildId: alertData.guildId,
                    data: alertData.data || {},
                    status: 'active',
                    timestamp: new Date()
                }
            });

            console.log(`üö® REAL ALERT: ${alert.title} [${severity}]`);

            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Discord –∫–∞–Ω–∞–ª
            await this.notifyDiscordChannel(alert);

            return alert;
        } catch (error) {
            console.error('Error creating alert:', error);
        }
    }

    // üîî –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –í DISCORD –ö–ê–ù–ê–õ
    async notifyDiscordChannel(alert) {
        try {
            const channelId = process.env.ALERTS_CHANNEL_ID;
            if (!channelId) return;

            const client = getClient();
            const channel = await client.channels.fetch(channelId);

            if (channel && channel.isTextBased()) {
                const embed = {
                    title: alert.title,
                    description: alert.description,
                    color: this.getSeverityColor(alert.severity),
                    fields: [
                        {
                            name: '–¢–∏–ø',
                            value: alert.type,
                            inline: true
                        },
                        {
                            name: '–°–µ—Ä–≤–µ—Ä',
                            value: alert.guildId,
                            inline: true
                        },
                        {
                            name: '–í—Ä–µ–º—è',
                            value: `<t:${Math.floor(new Date(alert.timestamp).getTime() / 1000)}:R>`,
                            inline: true
                        }
                    ],
                    timestamp: new Date().toISOString()
                };

                await channel.send({ embeds: [embed] });
            }
        } catch (error) {
            console.error('Error sending Discord notification:', error);
        }
    }

    getSeverityColor(severity) {
        const colors = {
            'critical': 0xff0000, // –ö—Ä–∞—Å–Ω—ã–π
            'high': 0xffa500,    // –û—Ä–∞–Ω–∂–µ–≤—ã–π
            'medium': 0xffff00,  // –ñ–µ–ª—Ç—ã–π
            'low': 0x00ff00      // –ó–µ–ª–µ–Ω—ã–π
        };
        return colors[severity] || 0x808080;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    async getActiveAlerts(guildId, limit = 10) {
        try {
            return await this.prisma.alert.findMany({
                where: {
                    guildId: guildId,
                    status: 'active'
                },
                orderBy: {
                    timestamp: 'desc'
                },
                take: limit
            });
        } catch (error) {
            console.error('Error getting active alerts:', error);
            return [];
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–ª–µ—Ä—Ç–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    async resolveAlert(alertId, resolvedBy) {
        try {
            return await this.prisma.alert.update({
                where: { id: alertId },
                data: {
                    status: 'resolved',
                    resolvedBy: resolvedBy,
                    resolvedAt: new Date()
                }
            });
        } catch (error) {
            console.error('Error resolving alert:', error);
        }
    }
}

global.statsCollector = new StatsCollector();
global.alertSystem = new AlertSystem();

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function startStatsCollection(client) {
    setInterval(async () => {
        try {
            const guild = client.guilds.cache.get(process.env.GUILD_ID);
            if (guild) {
                await global.statsCollector.saveServerStats(guild);
            }
        } catch (error) {
            console.error('Error in stats collection:', error);
        }
    }, 5 * 60 * 1000); // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞
client.once('ready', () => {
    console.log('üîÑ Starting stats collection...');
    startStatsCollection(client);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const guild = client.guilds.cache.get(process.env.GUILD_ID);
    if (guild) {
        global.statsCollector.saveServerStats(guild);
    }
});

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä
global.commandTracker = new CommandTracker();

// –ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥
client.commands = new Collection();

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
const commandsPath = path.join(__dirname, 'commands');
const commandFiles = fs.readdirSync(commandsPath).filter(file => file.endsWith('.js'));

for (const file of commandFiles) {
    const filePath = path.join(commandsPath, file);
    const command = require(filePath);

    if ('data' in command && 'execute' in command) {
        client.commands.set(command.data.name, command);
        console.log(`Loaded command: /${command.data.name}`);
    } else {
        console.log(`Command ${filePath} is missing required properties`);
    }
}

// –§–£–ù–ö–¶–ò–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –ö–û–ú–ê–ù–î
async function registerCommands() {
    try {
        const commands = [];

        for (const file of commandFiles) {
            const filePath = path.join(commandsPath, file);
            const command = require(filePath);
            if ('data' in command && 'execute' in command) {
                commands.push(command.data.toJSON());
            }
        }

        console.log(` Starting automatic command registration for ${commands.length} commands...`);

        const rest = new REST().setToken(process.env.DISCORD_BOT_TOKEN);

        // 1. –°–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≥–∏–ª—å–¥–∏–∏ (—Å–µ—Ä–≤–µ—Ä–∞)
        try {
            console.log('üè† Registering guild commands...');
            const guildData = await rest.put(
                Routes.applicationGuildCommands(
                    process.env.CLIENT_ID || process.env.DISCORD_CLIENT_ID,
                    process.env.GUILD_ID || process.env.DISCORD_GUILD_ID
                ),
                { body: commands }
            );
            console.log(` Successfully registered ${guildData.length} guild commands.`);
            guildData.forEach(cmd => console.log(`   - /${cmd.name}`));
        } catch (guildError) {
            console.log(' Guild command registration failed:', guildError.message);
        }

        // 2. –ó–∞—Ç–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ì–õ–û–ë–ê–õ–¨–ù–´–ï –∫–æ–º–∞–Ω–¥—ã (–¥–ª—è –∑–Ω–∞—á–∫–∞)
        try {
            console.log(' Registering GLOBAL commands for badge...');
            const globalData = await rest.put(
                Routes.applicationCommands(process.env.CLIENT_ID || process.env.DISCORD_CLIENT_ID),
                { body: commands }
            );
            console.log(` Global commands registered successfully! ${globalData.length} commands.`);
            console.log(' Badge "Supports Slash Commands" should appear within 24 hours!');
        } catch (globalError) {
            console.log(' Global command registration failed:', globalError.message);
            console.log(' This may affect the badge appearance, but bot will continue working.');
        }

    } catch (error) {
        console.error(' Error during command registration:', error);
        console.log(' But continuing bot startup...');
    }
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
const eventsPath = path.join(__dirname, 'events');
const eventFiles = fs.readdirSync(eventsPath).filter(file => file.endsWith('.js'));

for (const file of eventFiles) {
    const filePath = path.join(eventsPath, file);
    const event = require(filePath);

    if (event.once) {
        client.once(event.name, (...args) => event.execute(...args));
    } else {
        client.on(event.name, (...args) => event.execute(...args));
    }

    console.log(`Loaded event: ${event.name}`);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º API
const { startAPI } = require('./api.js');
startAPI();

// –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–æ—Ç—É
console.log('Attempting to login to Discord...');
client.login(process.env.DISCORD_BOT_TOKEN)
    .then(() => {
        console.log('Bot logged in successfully');

        // –ó–ê–ü–£–°–ö–ê–ï–ú –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–£–Æ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Æ –ü–û–°–õ–ï –£–°–ü–ï–®–ù–û–ì–û –õ–û–ì–ò–ù–ê
        registerCommands();
    })
    .catch(error => {
        console.error('Bot login failed:', error.message);
        console.log('But API is still running!');
    });

// Graceful shutdown
process.on('SIGINT', () => {
    console.log('Shutting down...');
    const finalStats = global.commandTracker.getTotalStats();
    console.log(`Final stats: ${finalStats.totalUsage} commands tracked`);
    client.destroy();
    process.exit(0);
});