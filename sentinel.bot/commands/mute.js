const { SlashCommandBuilder } = require('discord.js');
const { PrismaClient } = require('@prisma/client');
const config = require('../utils/config');
const logger = require('../utils/logger');

const prisma = new PrismaClient();

module.exports = {
  data: new SlashCommandBuilder()
    .setName('mute')
    .setDescription('–ó–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    .addUserOption(option =>
      option.setName('user')
        .setDescription('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –º—É—Ç–∞')
        .setRequired(true))
    .addIntegerOption(option =>
      option.setName('duration')
        .setDescription('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö')
        .setRequired(true))
    .addStringOption(option =>
      option.setName('reason')
        .setDescription('–ü—Ä–∏—á–∏–Ω–∞ –º—É—Ç–∞')),

  async execute(interaction) {
    const startTime = Date.now(); // ‚Üê –ù–∞—á–∞–ª–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è

    try {
      const targetUser = interaction.options.getUser('user');
      const duration = interaction.options.getInteger('duration');
      const reason = interaction.options.getString('reason') || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
      if (!interaction.member.permissions.has('MODERATE_MEMBERS')) {
        const responseTime = Date.now() - startTime;
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ø—ã—Ç–∫—É –±–µ–∑ –ø—Ä–∞–≤
        await prisma.commandStats.create({
          data: {
            command: 'mute',
            guildId: interaction.guild.id,
            userId: interaction.user.id,
            success: false,
            executionTime: responseTime,
            error: 'Insufficient permissions',
            timestamp: new Date()
          }
        });

        return interaction.reply({
          content: '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!',
          ephemeral: true
        });
      }

      const muteRole = interaction.guild.roles.cache.get(config.moderation.muteRoleId);
      if (!muteRole) {
        const responseTime = Date.now() - startTime;
        await prisma.commandStats.create({
          data: {
            command: 'mute',
            guildId: interaction.guild.id,
            userId: interaction.user.id,
            success: false,
            executionTime: responseTime,
            error: 'Mute role not found',
            timestamp: new Date()
          }
        });

        return interaction.reply({
          content: '‚ùå –†–æ–ª—å –¥–ª—è –º—É—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!',
          ephemeral: true
        });
      }

      const member = await interaction.guild.members.fetch(targetUser.id);
      await member.roles.add(muteRole, `–ú—É—Ç –Ω–∞ ${duration} –º–∏–Ω—É—Ç. –ü—Ä–∏—á–∏–Ω–∞: ${reason}`);

      const responseTime = Date.now() - startTime; // ‚Üê –ö–æ–Ω–µ—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
      await prisma.commandStats.create({
        data: {
          command: 'mute',
          guildId: interaction.guild.id,
          userId: targetUser.id,
          success: true,
          executionTime: responseTime,
          timestamp: new Date()
        }
      });

      // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç—Ä–µ–∫–µ—Ä –ø–∞–º—è—Ç–∏
      if (global.commandTracker) {
        global.commandTracker.recordCommand(
          'mute',
          true,
          responseTime,
          interaction.guild.id,
          targetUser.id
        );
      }

      await interaction.reply({
        content: `üîá ${targetUser.tag} –±—ã–ª –∑–∞–º—É—á–µ–Ω –Ω–∞ ${duration} –º–∏–Ω—É—Ç. –ü—Ä–∏—á–∏–Ω–∞: ${reason}`,
        ephemeral: false
      });

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–Ω—è—Ç–∏–µ –º—É—Ç–∞
      setTimeout(async () => {
        try {
          await member.roles.remove(muteRole, '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–Ω—è—Ç–∏–µ –º—É—Ç–∞');
          const channel = interaction.channel;
          if (channel) {
            await channel.send(`üîä ${targetUser.tag} –±—ã–ª —Ä–∞–∑–º—É—á–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏`);
          }
        } catch (e) {
          logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Å–Ω—è—Ç–∏–∏ –º—É—Ç–∞: ${e}`);
        }
      }, duration * 60 * 1000);

    } catch (error) {
      const responseTime = Date.now() - startTime;
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –º—É—Ç–∞: ${error}`);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É
      await prisma.commandStats.create({
        data: {
          command: 'mute',
          guildId: interaction.guild.id,
          userId: interaction.user.id,
          success: false,
          executionTime: responseTime,
          error: error.message,
          timestamp: new Date()
        }
      });

      throw error;
    }
  }
};