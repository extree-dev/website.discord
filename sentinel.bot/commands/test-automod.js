// commands/test-automod.js
const { SlashCommandBuilder } = require('discord.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('test-automod')
        .setDescription('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤ –∞–≤—Ç–æ–º–æ–¥–∞')
        .addStringOption(option =>
            option.setName('type')
                .setDescription('–¢–∏–ø —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è')
                .setRequired(true)
                .addChoices(
                    { name: '–ó–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ', value: 'forbidden' },
                    { name: '–°—Å—ã–ª–∫–∞', value: 'link' },
                    { name: '–°–ø–∞–º', value: 'spam' }
                )),

    async execute(interaction) {
        const allowedRoleId = '1399388382492360908';
        if (!interaction.member.roles.cache.has(allowedRoleId)) {
            return await interaction.reply({
                content: '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.',
                flags: 64
            });
        }

        const type = interaction.options.getString('type');
        let testMessage = '';

        switch (type) {
            case 'forbidden':
                testMessage = '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ª–æ–≤–æ–º —Å–ø–∞–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–¥–∞';
                break;
            case 'link':
                testMessage = '–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Å—ã–ª–∫—É: https://example.com';
                break;
            case 'spam':
                testMessage = 'test '.repeat(10);
                break;
        }

        // –°–æ–∑–¥–∞–µ–º –∞–ª–µ—Ä—Ç –≤—Ä—É—á–Ω—É—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if (global.alertSystem) {
            await global.alertSystem.createAlert('automod_test', 'medium', {
                title: 'üß™ –¢–ï–°–¢ –ê–í–¢–û–ú–û–î–ê',
                description: `–¢–µ—Å—Ç–æ–≤–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã: ${type}`,
                guildId: interaction.guild.id,
                data: {
                    action: 'test_execution',
                    rule: type,
                    content: testMessage,
                    user: interaction.user.tag,
                    userId: interaction.user.id,
                    channel: interaction.channel.name,
                    test: true,
                    timestamp: new Date().toISOString()
                }
            });
        }

        await interaction.reply({
            content: `‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∞–ª–µ—Ä—Ç –∞–≤—Ç–æ–º–æ–¥–∞ —Å–æ–∑–¥–∞–Ω! –¢–∏–ø: ${type}\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞—à–±–æ—Ä–¥.`,
            flags: 64
        });
    }
};