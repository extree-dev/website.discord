// commands/unban.js
const { SlashCommandBuilder, PermissionFlagsBits } = require('discord.js');
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

module.exports = {
    data: new SlashCommandBuilder()
        .setName('unban')
        .setDescription('–†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        .addStringOption(option =>
            option.setName('user_id')
                .setDescription('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞')
                .setRequired(true))
        .addStringOption(option =>
            option.setName('reason')
                .setDescription('–ü—Ä–∏—á–∏–Ω–∞ —Ä–∞–∑–±–∞–Ω–∞')
                .setRequired(false))
        .setDefaultMemberPermissions(PermissionFlagsBits.BanMembers),

    async execute(interaction) {
        const startTime = Date.now();

        try {
            const userId = interaction.options.getString('user_id');
            const reason = interaction.options.getString('reason') || '–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
            if (!interaction.member.permissions.has(PermissionFlagsBits.BanMembers)) {
                return await interaction.reply({
                    content: '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
                    flags: 64
                });
            }

            // –†–∞–∑–±–∞–Ω–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await interaction.guild.members.unban(userId, reason);

            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await prisma.bannedUser.updateMany({
                where: {
                    discordId: userId,
                    guildId: interaction.guild.id,
                    unbannedAt: null
                },
                data: {
                    unbannedAt: new Date(),
                    unbannedBy: interaction.user.id,
                    unbannedByUsername: interaction.user.username,
                    unbanReason: reason
                }
            });

            const responseTime = Date.now() - startTime;

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥—ã
            await prisma.commandStats.create({
                data: {
                    command: 'unban',
                    guildId: interaction.guild.id,
                    userId: userId,
                    success: true,
                    executionTime: responseTime,
                    timestamp: new Date()
                }
            });

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç—Ä–µ–∫–µ—Ä –ø–∞–º—è—Ç–∏
            if (global.commandTracker) {
                global.commandTracker.recordCommand(
                    'unban',
                    true,
                    responseTime,
                    interaction.guild.id,
                    userId
                );
            }

            await interaction.reply({
                content: `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω\nüìù –ü—Ä–∏—á–∏–Ω–∞: ${reason}`,
                flags: 64
            });

        } catch (error) {
            console.error('Error in unban command:', error);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –≤ –±–∞–∑—É
            await prisma.commandStats.create({
                data: {
                    command: 'unban',
                    guildId: interaction.guild.id,
                    userId: interaction.user.id,
                    success: false,
                    executionTime: 0,
                    error: error.message,
                    timestamp: new Date()
                }
            });

            await interaction.reply({
                content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ID –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π.',
                flags: 64
            });
        }
    }
};